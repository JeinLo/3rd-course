import {
    fetchComments,
    postComment,
    loginUser,
    registerUser,
    likeComment,
} from './api.js'
import {
    renderComments,
    renderLoginForm,
    renderRegisterForm,
} from './render.js'

let comments = []
let user = null

document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('authToken')
    const userName = localStorage.getItem('userName')
    if (token && userName) {
        user = { name: userName, token }
    }

    initApp()

    if (!user) {
        renderComments(comments, user) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ç–µ–∫—Å—Ç "–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å"
    }

    document
        .getElementById('comment-button')
        ?.addEventListener('click', handleCommentSubmit)
    document
        .getElementById('logout-button')
        ?.addEventListener('click', handleLogout)
    document
        .getElementById('login-required')
        ?.addEventListener('click', (e) => {
            e.preventDefault()
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            document.getElementById('auth-form-container').style.display =
                'block'
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            document.getElementById('comments-list').style.display = 'none'
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            document.getElementById('comment-form').style.display = 'none'
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
            document.getElementById('logout-button').style.display = 'none'
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å"
            document.getElementById('login-required').style.display = 'none'
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
            renderLoginForm()
            setupFormHandlers()
        })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º
    document
        .getElementById('auth-form-container')
        .addEventListener('click', (e) => {
            if (e.target.id === 'switch-to-register') {
                e.preventDefault()
                renderRegisterForm()
                setupFormHandlers()
            } else if (e.target.id === 'switch-to-login') {
                e.preventDefault()
                renderLoginForm()
                setupFormHandlers()
            }
        })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –ª–∞–π–∫–∞–º
    document.getElementById('comments-list').addEventListener('click', (e) => {
        const likeButton = e.target.closest('.like-button')
        if (likeButton && user) {
            const commentId = likeButton.dataset.commentId
            handleLike(commentId, likeButton)
        } else if (likeButton && !user) {
            alert('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–∞–π–∫–æ–≤')
        }
    })
})

function initApp() {
    fetchComments()
        .then((fetchedComments) => {
            comments = fetchedComments
            renderComments(comments, user)
        })
        .catch((err) => {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')
        })
}

function setupFormHandlers() {
    const authForm = document.querySelector('.auth-form')
    if (authForm) {
        authForm.addEventListener('submit', (e) => {
            e.preventDefault()
            const login = document.getElementById('login-input')?.value.trim()
            const name = document.getElementById('name-input')?.value.trim()
            const password = document
                .getElementById('password-input')
                ?.value.trim()

            const isLoginButton = e.submitter?.id === 'login-button'
            const isRegisterButton = e.submitter?.id === 'register-button'

            if (isLoginButton) {
                handleLogin(login, password)
            } else if (isRegisterButton) {
                handleRegister(login, name, password)
            }
        })
    }
}

function handleCommentSubmit() {
    const text = document.getElementById('comment-text').value.trim()
    if (!text) {
        alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    }
    postComment(text)
        .then(() => {
            document.getElementById('comment-text').value = ''
            return fetchComments()
        })
        .then((newComments) => {
            comments = newComments
            renderComments(comments, user)
        })
        .catch((err) => {
            alert(err.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
        })
}

function handleLike(commentId, likeButton) {
    // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∏–ª—å
    const isCurrentlyLiked = likeButton.classList.contains('-active-like')
    likeButton.classList.toggle('-active-like')
    likeButton.textContent = isCurrentlyLiked ? 'ü§ç' : '‚ù§Ô∏è'

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
    const likesCounter = likeButton
        .closest('.likes')
        .querySelector('.likes-counter')
    const currentLikes = parseInt(
        likesCounter.textContent.replace('–õ–∞–π–∫–∏: ', ''),
    )
    likesCounter.textContent = `–õ–∞–π–∫–∏: ${isCurrentlyLiked ? currentLikes - 1 : currentLikes + 1}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    likeComment(commentId)
        .then(() => fetchComments())
        .then((newComments) => {
            comments = newComments
            renderComments(comments, user)
        })
        .catch((err) => {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            likeButton.classList.toggle('-active-like')
            likeButton.textContent = isCurrentlyLiked ? '‚ù§Ô∏è' : 'ü§ç'
            likesCounter.textContent = `–õ–∞–π–∫–∏: ${currentLikes}`
            alert(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞')
        })
}

function handleLogin(login, password) {
    if (!login || !password) {
        showErrorMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
        return
    }

    loginUser(login, password)
        .then((response) => {
            user = {
                name: response.user.name,
                token: response.user.token,
            }
            localStorage.setItem('authToken', user.token)
            localStorage.setItem('userName', user.name)
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            renderComments(comments, user)
        })
        .catch((error) => {
            showErrorMessage(error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        })
}

function handleRegister(login, name, password) {
    if (!login || !name || !password) {
        showErrorMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
        return
    }

    registerUser(login, name, password)
        .then((response) => {
            user = {
                name: response.user.name,
                token: response.user.token,
            }
            localStorage.setItem('authToken', user.token)
            localStorage.setItem('userName', user.name)
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            renderComments(comments, user)
        })
        .catch((error) => {
            showErrorMessage(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        })
}

function handleLogout() {
    user = null
    localStorage.removeItem('authToken')
    localStorage.removeItem('userName')
    renderComments(comments, user)
}

function showErrorMessage(message) {
    const errorMessage = document.querySelector('.error-message')
    if (errorMessage) {
        errorMessage.textContent = message
        errorMessage.style.display = 'block'
    }
}
